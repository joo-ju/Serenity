# Ch 01.  자바스크립트의 좋은 점들

## 자바스크립트 특징

- **함수**

    어휘적 유효 범위를 가진 *일급 객체* 

- **엄격하지 않은 타입 체크**

    복잡한 클래스 계층 필요 X, 타입 캐스팅 필요 X

- **객체 리터럴 표기법**

    열거하여 객체 생성 가능

- 포로토타입

    특정 객체에 있는 속성을 다른 객체에 직접 상속 가능

- 전역변수
- 경량화 & 표현적 언어

## 단어 설명

**일급 객체** 

언어상의 제약이 없는 언어. 변수에 대입되거나 인수로 넘길 수 있음. 사용할 때 전혀 제약이 없는 객체
---
# Ch 03.  객체

### 자바스크립트의 데이터 타입

- 숫자 | 문자열 | boolean   :   유사 객체, immutable(값 변경 불가)
- null
- undefined

### 객체

- 변형 가능한 속성들의 집합
- 이름과 값이 있는 속성들을 포함하는 컨테이너
- 클래스 필요 X
- 데이터를 수집, 구조화 용이

## 객체 리터럴

### 표기법

```jsx
var empty_object = {};

var stooge = {
	// 속성(property)
	"first-name": "Jerome",
	"last-name" : "Howard"
};
```

- 속성 이름 : 문자열(빈문자열 포함), "" 생략 가능(예약어가 아닐 경우만), 중첩 객체 가능

### 속성값 읽기

```jsx
stooge["first-name"]       // "Jerome"
flight.departure.LATA      // "SYD"
```

예약어가 아닐 경우는 .표기법 사용 가능

```jsx
stooge["middle-name"]       // undefined
```

객체에 존재하지 않는 속성을 읽으면 undefined 반환.

### 속성값 갱신

존재하면 해당 속성값만 갱신

존재하지 않으면 해당 속성 추가

### 참조

복사되지 않고 참조된다. 

```jsx
var x = stooge;

x.nickname = "Curly";
var nick = stooge.nickname;     // 'Curly'
```

복사가 아니라 참조를 하고 있기 때문에 근본적인 stooge의 값이 변경됨.

### 프로토타입

객체의 속성을 읽을 때 사용

객체의 속성값을 읽으려고 하는데 해당 속성이 없으면 프로토타입 객체에 가서 해당 속성을 찾는다.

프로토타입 체인에 존재하지 않으면 undefined 반환.

### 삭제

delete 연산자 사용 

```jsx
delete another_stooge.nickname;
```

해당 속성이 객체에 있을 때만 삭제한다. 프로토타입 체인에 있는 객체들에 접근 X

객체 내의 속성 삭제후 속성값을 읽으면 프로토타입의 속성을 출력함.